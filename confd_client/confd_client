#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2014-2019 The Wazo Authors  (see the AUTHORS file)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

import json
import logging
import sys

import click as c
import requests


confd = None


class KeyValueParamType(c.ParamType):
    name = 'keyvalue'

    def __init__(self, **converters):
        self._converters = converters

    def convert(self, text, param, ctx):
        try:
            key, value = text.split(':', 1)
        except ValueError:
            self.fail("missing ':' in key-value pair")

        if key in self._converters:
            value = self._converters[key].convert(value, None, None)

        return (key, value)


class Confd(object):

    @classmethod
    def from_options(cls, host, port, token, tenant):
        url = "https://{}:{}/1.1".format(host, port)
        return cls(url, token, tenant)

    def __init__(self, base_url, token, tenant):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.verify = False
        self.session.headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'X-Auth-Token': token,
            'Wazo-Tenant': tenant,
        }

    def __call__(self, method, url, **parameters):
        full_url = self._build_url(url)
        parameters = self._encode_parameters(parameters)

        response = self.session.request(method, full_url, data=parameters)

        self._check_status(response)
        return self._decode_response(response)

    def with_dict(self, method, url, parameters):
        self.__call__(method, url, **parameters)

    def _encode_parameters(self, parameters):
        logging.debug('parameters: %s', parameters)
        return json.dumps(parameters) if parameters else None

    def _build_url(self, url):
        return '/'.join((self.base_url, url.lstrip('/')))

    def _check_status(self, response):
        if response.status_code >= 300:
            logging.error('status: %d. response: %s',
                          response.status_code,
                          response.text)
            sys.exit(1)

    def _decode_response(self, response):
        decoded = response.json() if response.text else None
        logging.debug('response: %s', decoded)
        return decoded


voicemail_type = KeyValueParamType(max_messages=c.INT,
                                   attach_audio=c.BOOL,
                                   delete_messages=c.BOOL,
                                   ask_password=c.BOOL)


destination_type = KeyValueParamType(user_id=c.INT,
                                     queue_id=c.INT,
                                     group_id=c.INT,
                                     conference_id=c.INT,
                                     agent_id=c.INT,
                                     paging_id=c.INT,
                                     filter_member_id=c.INT,
                                     position=c.INT,
                                     forward=c.Choice(['busy', 'noanswer', 'unconditional']),
                                     transfer=c.Choice(['blind', 'attended']),
                                     action=c.Choice(['login', 'logout', 'toggle']))


@c.group()
@c.option('--debug', '-d', default=False, is_flag=True)
@c.option('--host', '-H', default='wazo-test', envvar='XIVO_HOST')
@c.option('--port', '-p', default=9486, envvar='XIVO_CONFD_PORT', type=c.INT)
@c.option('--token', '-t', envvar='WAZO_TOKEN')
@c.option('--tenant', '-T', envvar='WAZO_TENANT')
def cli(debug, host, port, token, tenant):
    setup_logging(debug)

    logging.debug("host: %s, port: %d, token: %s, tenant: %s", host, port, token, tenant)
    global confd
    confd = Confd.from_options(host, port, token, tenant)


def setup_logging(debug=False):
    client_level = logging.DEBUG if debug else logging.INFO
    requests_level = logging.DEBUG if debug else logging.WARN
    logging.basicConfig(level=client_level)
    logging.getLogger('requests').setLevel(requests_level)
    requests.packages.urllib3.disable_warnings()


@c.command('extension')
@c.argument('exten')
@c.option('--context', default='default')
def create_extension(exten, context):
    logging.debug('creating extension %s@%s', exten, context)
    extension = confd('POST', '/extensions', exten=exten, context=context)
    c.echo(extension['id'])


@c.command('line')
@c.option('--context', default='default')
@c.option('--slot', default=1, type=c.INT)
def create_line(context, slot):
    logging.debug('creating line (context: %s, slot: %d)', context, slot)
    line = confd('POST', '/lines_sip', context=context, device_slot=slot)
    c.echo(line['id'])


@c.command('user')
@c.argument('name', nargs=-1)
def create_user(name):
    firstname, lastname = name[0], ' '.join(name[1:])
    logging.debug('creating user %s %s', firstname, lastname)

    user = confd('POST', '/users', firstname=firstname, lastname=lastname)
    c.echo(user['id'])


@c.command('voicemail')
@c.argument('number')
@c.option('--context', default='default')
@c.option('--name')
def create_voicemail(number, context, name=None):
    logging.debug('creating voicemail %s@%s (name: %s)', number, context, name)
    voicemail = confd('POST', '/voicemails', number=number, name=name, context=context)
    c.echo(voicemail['id'])


@c.command('voicemail', help="Update a voicemail using a space-seperated list of 'name:value' parameters")
@c.argument('voicemail_id', type=c.INT)
@c.argument('parameters', nargs=-1, type=voicemail_type)
def update_voicemail(voicemail_id, parameters):
    parameters = dict(parameters)
    logging.info('updating voicemail %d (%s)', voicemail_id, parameters)

    confd.with_dict('PUT', '/voicemails/{}'.format(voicemail_id), parameters)


@c.command('extension')
@c.argument('extension_id', type=c.INT)
def delete_extension(extension_id):
    logging.debug('deleting extension id %d', extension_id)
    confd('DELETE', '/extensions/{}'.format(extension_id))


@c.command('line')
@c.argument('line_id', type=c.INT)
def delete_line(line_id):
    logging.debug('deleting line id %d', line_id)
    confd('DELETE', '/lines_sip/{}'.format(line_id))


@c.command('user')
@c.argument('user_id', type=c.INT)
def delete_user(user_id):
    logging.debug('deleting user id %d', user_id)
    confd('DELETE', '/users/{}'.format(user_id))


@c.command('voicemail')
@c.argument('voicemail_id', type=c.INT)
def delete_voicemail(voicemail_id):
    logging.debug('deleting voicemail id %d', voicemail_id)
    confd('DELETE', '/voicemails/{}'.format(voicemail_id))


@c.command('line-extension')
@c.argument('line_id', type=c.INT)
@c.argument('extension_id', type=c.INT)
def associate_line_extension(line_id, extension_id):
    logging.info('associating line %d with extension %d', line_id, extension_id)

    url = '/lines/{}/extensions'.format(line_id)
    confd('POST', url, extension_id=extension_id)


@c.command('user-line')
@c.argument('user_id', type=c.INT)
@c.argument('line_id', type=c.INT)
def associate_user_line(user_id, line_id):
    logging.info('associating user %d with line %d', user_id, line_id)
    confd('POST', '/users/{}/lines'.format(user_id), line_id=line_id)

    line = confd('GET', '/lines_sip/{}'.format(line_id))
    logging.info('Your provisioning number is %s', line['provisioning_extension'])


@c.command('user-voicemail')
@c.argument('user_id', type=c.INT)
@c.argument('voicemail_id', type=c.INT)
def associate_user_voicemail(user_id, voicemail_id):
    logging.info('associating user %d with voicemail %d', user_id, voicemail_id)

    url = '/users/{}/voicemail'.format(user_id)
    confd('POST', url, voicemail_id=voicemail_id)


@c.command('line-extension')
@c.argument('line_id', type=c.INT)
@c.argument('extension_id', type=c.INT)
def dissociate_line_extension(line_id, extension_id):
    logging.info('dissociating line %d from extension %d', line_id, extension_id)
    confd('DELETE', '/lines/{}/extensions/{}'.format(line_id, extension_id))


@c.command('user-line')
@c.argument('user_id', type=c.INT)
@c.argument('line_id', type=c.INT)
def dissociate_user_line(user_id, line_id):
    logging.info('dissociating user %d from line %d', user_id, line_id)
    confd('DELETE', '/users/{}/lines/{}'.format(user_id, line_id))


@c.command('user-voicemail')
@c.argument('user_id', type=c.INT)
def dissociate_user_voicemail(user_id):
    logging.info('dissociating user %d from voicemail', user_id)
    confd('DELETE', '/users/{}/voicemail'.format(user_id))


@c.command('device')
@c.argument('mac', default=None)
@c.option('--ip', default=None)
@c.option('--vendor', default='Aastra')
@c.option('--model', default='6757i')
@c.option('--plugin', default='xivo-aastra-3.3.1-SP2')
def create_device(ip, mac, vendor, model, plugin):
    logging.debug('creating device with ip: %s and mac: %s', ip, mac)
    device = confd('POST', '/devices', ip=ip, mac=mac, vendor=vendor, model=model, plugin=plugin)
    c.echo(device['id'])


@c.command('synchronize')
@c.argument('device_id')
def synchronize_device(device_id):
    logging.info('synchronizing device %s', device_id)
    confd('GET', '/devices/%s/synchronize'.format(device_id))


@c.command('autoprov')
@c.argument('device_id')
def autoprov_device(device_id):
    logging.info('resetting device %s to autoprov', device_id)
    confd('GET', '/devices/%s/autoprov'.format(device_id))


@c.command('funckey', help="Create a funckey")
@c.argument('position', type=c.INT)
@c.argument('destination')
@c.argument('parameters', nargs=-1, type=destination_type)
@c.option('--user-id', '-u', type=c.INT)
@c.option('--template-id', '-t', type=c.INT)
def add_funckey(position, destination, parameters, user_id, template_id):
    parameters = dict(parameters)
    parameters['type'] = destination
    if user_id:
        url = "/users/{user_id}/funckeys/{position}".format(user_id=user_id,
                                                            position=position)
    elif template_id:
        url = "/funckeys/templates/{template_id}/{position}".format(template_id=template_id,
                                                                    position=position)
    else:
        print "ERROR: must specify either user_id or template_id"
        sys.exit(1)

    logging.info("updating funckey %s", url)
    confd('PUT', url, destination=parameters)


def build_parser():
    create = c.Group('create')
    create.add_command(create_extension)
    create.add_command(create_line)
    create.add_command(create_user)
    create.add_command(create_voicemail)
    create.add_command(create_device)
    create.add_command(add_funckey)

    update = c.Group('update')
    update.add_command(update_voicemail)

    delete = c.Group('delete')
    delete.add_command(delete_extension)
    delete.add_command(delete_line)
    delete.add_command(delete_user)
    delete.add_command(delete_voicemail)

    associate = c.Group('associate')
    associate.add_command(associate_line_extension)
    associate.add_command(associate_user_line)
    associate.add_command(associate_user_voicemail)

    dissociate = c.Group('dissociate')
    dissociate.add_command(dissociate_line_extension)
    dissociate.add_command(dissociate_user_line)
    dissociate.add_command(dissociate_user_voicemail)

    device = c.Group('device')
    device.add_command(synchronize_device)
    device.add_command(autoprov_device)

    cli.add_command(create)
    cli.add_command(update)
    cli.add_command(delete)
    cli.add_command(associate)
    cli.add_command(dissociate)
    cli.add_command(device)

    return cli


if __name__ == '__main__':
    parser = build_parser()
    parser()
