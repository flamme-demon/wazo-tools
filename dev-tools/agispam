#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Small utility to do simultaneous requests to wazo-agid (or any FastAGI server).
#
# Originally developed to test a "thread related" bug in wazo-agid (#5145).

import argparse
import itertools
import select
import socket

HOST = '127.0.0.1'
PORT = 4573


def main():
    parsed_args = parse_args()

    connections = [AGIConnection() for _ in xrange(parsed_args.n)]
    test = AGISimultaneousTest(connections)

    test.prepare()
    test.execute()


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('n', type=int, help='number of concurrent requests')

    return parser.parse_args()


class AGIConnection(object):

    _generate_id = itertools.count().next

    def __init__(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.id = self._generate_id()

    def close(self):
        print '<%02d> close' % self.id
        self.sock.close()

    def connect(self):
        print '<%02d> connect' % self.id
        self.sock.connect((HOST, PORT))

    def recv(self):
        data = self.sock.recv(2048)
        print '<%02d> recv: %r' % (self.id, data)
        return data

    def send(self, data):
        print '<%02d> send' % self.id
        self.sock.send(data)


class AGISimultaneousTest(object):

    DATA = '''\
agi_network: yes
agi_network_script: agent_get_status
agi_request: agi://127.0.0.1/agent_get_status
agi_channel: SIP/je5qtq-00000067
agi_language: fr_FR
agi_type: SIP
agi_uniqueid: 1407844711.104
agi_version: 11.11.0
agi_callerid: 1001
agi_calleridname: Eles 01
agi_callingpres: 0
agi_callingani2: 0
agi_callington: 0
agi_callingtns: 0
agi_dnid: 16
agi_rdnis: unknown
agi_context: default
agi_extension: 16
agi_priority: 2
agi_enhanced: 0.0
agi_accountcode: 
agi_threadid: -1254360208
agi_arg_1: 1

'''

    def __init__(self, connections):
        self.connections = connections

    def prepare(self):
        for conn in self.connections:
            conn.connect()
            conn.sock.setblocking(0)

    def execute(self):
        fd_to_conn = {}
        poller = select.poll()

        for conn in self.connections:
            fd = conn.sock.fileno()
            fd_to_conn[fd] = conn
            poller.register(fd, select.POLLIN)

        for conn in self.connections:
            # we supose the remote TCP window is large enough so that the call to send won't raise an
            # EWOULDBLOCK error
            conn.send(self.DATA)

        while fd_to_conn:
            ready = poller.poll()
            for fd, mode in ready:
                conn = fd_to_conn[fd]
                if mode & select.POLLIN:
                    data = conn.recv()
                    if data:
                        # let's just say "OK", suposing it won't block either
                        conn.send('200 result=1\n')
                    else:
                        conn.close()
                        del fd_to_conn[fd]
                        poller.unregister(fd)
                else:
                    print 'Unexpected poll event 0x%X on connection %s' % (mode, conn.id)
                    conn.close()
                    del fd_to_conn[fd]
                    poller.unregister(fd)


main()
