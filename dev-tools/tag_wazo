#!/bin/bash
# Author: Nicolas Hicher <nhicher@proformatique.com (atarakt)>
# License: GNU General Public License (GPL) V3
# Copyright 2015-2018 The Wazo Authors  (see the AUTHORS file)

usage() {
    cat << EOF
You have to provide some informations to allow tagging:

    $(basename $0) -v wazo_version [-d git_root_directory]

    -v: wazo_version
    -d: git_root_directory (default ~/wazo_src)
    -p: tag prefix (default wazo)

    example : $(basename $0) -v 12.14

EOF
    exit
}

update_directory() {
    local dir="${1}"
    pushd "${dir}" >> /dev/null
    $git fetch -q origin || exit 1
    echo "$(basename ${dir}) updated."
    popd >> /dev/null
}

update_repositories() {
    local directories=$*
    echo "Ensure we start from an up-to-date repository"

    for dir in $directories; do
        update_directory "${dir}" &
    done

    wait
}

create_tag_cmd() {
    local version=$1
    local cmd="$git tag -s $tag_prefix-$version -m $tag_prefix-$version origin/master"
    echo $cmd
}

push_tag() {
    local dir="${1}"

    pushd "${dir}" >> /dev/null
    $git push --tags -q || exit 1
    popd >> /dev/null
}

push_tags() {
    local directories=$*

    for dir in ${directories}; do
        push_tag "${dir}" &
    done

    wait
}

create_tag() {
    local dir="${1}"
    local version="${2}"
    local cmd="${3}"

    pushd "${dir}" >> /dev/null

    lasttag=$(git tag | grep "${tag_prefix}-${version}")
    if [ -z $lasttag ]; then
        $cmd || echo "failed to tag ${dir}" ; exit 1
        echo "$(basename ${dir}) tagged"
    else
        echo "$(basename ${dir}) has already been tagged."
    fi

    popd >> /dev/null
}

create_tags() {
    local directories=$*
    local cmd=$(create_tag_cmd $version)
    local i=0
    local worker=16

    for dir in ${directories}; do
        echo "tagging $(basename ${dir})..."
        create_tag "${dir}" "${version}" "${cmd}" &

        n=$(($i%$worker))
        # We have to wait on the first tag for the gpg agent to ask for a password
        # We stop at each 10 tags to avoid flooding the gpg agent
        if [ "${n}" -eq 0 ]; then
            wait
        fi
        i=$((i+1))
    done

    wait
}

check_if_directories_exist() {
    local missed_dir=0
    for dir in $directories; do
        if [ ! -d $dir ]; then
            echo "directory $dir doesn't exist"
            missed_dir=1
        fi
    done
    if [ $missed_dir -eq 1 ]; then
        echo "some directories are missed"
        exit -1
    fi
}

while getopts :d:v:p:xy opt
do
  case ${opt} in
    d) git_root_directory=${OPTARG};;
    v) version=${OPTARG};;
    p) tag_prefix=${OPTARG};;
    x) debug=1;;
    '?')  echo "${0} : option ${OPTARG} is not valid" >&2
          exit -1
    ;;
  esac
done

debug="${debug:-"0"}"

if [ -z $version ]; then
    usage
fi


if [ $debug -eq 1 ]; then
    git="echo git"
else
    git="git"
fi

if [ -z $git_root_directory ]; then
    git_root_directory="$HOME/wazo_src"
else
    git_root_directory="$git_root_directory"
fi

if [ -z $tag_prefix ]; then
    tag_prefix="wazo"
else
    tag_prefix="${tag_prefix}"
fi

URL_REPOS_LIST=${URL_REPOS_LIST:="http://mirror.wazo.community/repos/python-tag"}
GIT_DIRECTORIES=$(wget -qO - "$URL_REPOS_LIST")
if [ $? -ne 0 ]; then
    echo "Unable to fetch repositories list from $URL_REPOS_LIST."
    exit 1
fi

directories=$(sed "s|^|$git_root_directory/|g" <<< "$GIT_DIRECTORIES")

check_if_directories_exist
update_repositories $directories
create_tags $directories
push_tags $directories
